pkg:
  readme:
    path: ${{ pkg.path.root }}$/README.md
    content: ${{ readme.main.content }}$
  urls:
    Homepage: ${{ web.url.home }}$
    Documentation: ${{ web.page.manual.url }}$
    Source: ${{ repo.url.home }}$
    Download: ${{ repo.url.releases.home }}$
    News: ${{ web.page.blog.url }}$
    Issue-Tracker: ${{ repo.url.issues.home }}$
  entry:
    cli:
      main:
        name: ${{ pkg.name }}$
        description: Main CLI entry of the package.
        ref: ${{ pkg.import_name }}$.__main__:main
  dependency:
    core:
      pkg_resources:
        name: PkgData
        import_name: pkgdata
        description: |
          Handling package resources, such as accessing data files that are
          distributed with the package.
        pip:
          spec: pkgdata
        url:
          docs: https://pkgdata.repodynamics.com/
          source: https://github.com/repodynamics/pkgdata
  file:
    all:
      glob: '**/*.py'
      header_comments:
        content: |
          ${{ pkg.name }}$ ${{ copyright }}$
          SPDX-License-Identifier: ${{ license.expression }}$
        max_line_length: ${{ tool.ruff.config.file.content.line-length }}$
    top_import:
      glob: __init__.py
      docstring:
        content: |
          ${{ name }}$: ${{ title }}$.

          ${{ abstract }}$
        max_line_length: ${{ tool.ruff.config.file.content.line-length }}$
  manifest:
    - graft ${{ pkg.path.source_rel }}$/${{ pkg.import_name }}$/data
    - include ${{ pkg.path.source_rel }}$/${{ pkg.import_name }}$/py.typed
    - global-exclude *.py[cod] __pycache__ *.so
  build: ${{ __custom_template__.pyproject-build }}$
  authors: ${{ citation.cff.authors }}$
__custom_template__:
  pyproject-build:
    requires: [ setuptools >= 72.1.0, versioningit >= 3.1.2 ]
    backend: setuptools.build_meta
    tool:
      setuptools:
        packages:
          find:
            where: [ '${{ .path.source_rel }}$' ]
            namespaces: true
        include-package-data: true
        license-files: [ LICENSES/*, COPYRIGHTS/* ]
        cmdclass:
          build_py: versioningit.cmdclass.build_py
          sdist: versioningit.cmdclass.sdist
      versioningit:
        vcs:
          method: git
          match: [ '${{ tag.version.prefix }}$[0-9]*.[0-9]*.[0-9]*' ]
          default-tag: ${{ tag.version.prefix }}$0.0.0
        tag2version:
          rmprefix: ${{ tag.version.prefix }}$
        format:
          distance: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}'
          dirty: '{base_version}+0.{committer_date:%Y.%m.%d}.{rev}.dirty'
          distance-dirty: '{base_version}+{distance}.{committer_date:%Y.%m.%d}.{rev}.dirty'
        onbuild:
          method: replace-version
          regex: '^__version_details__: dict\[str, str\] = (?P<version>.*)'
          require-match: true
          source-file: '${{ .path.source_rel }}$/${{ .import_name }}$/__init__.py'
          build-file: '${{ .import_name }}$/__init__.py'
          replacement: >-
            {{
            "version": "{version}",
            "build_date": "{build_date:%Y.%m.%d}",
            "committer_date": "{committer_date:%Y.%m.%d}",
            "author_date": "{author_date:%Y.%m.%d}",
            "branch": "{branch}",
            "distance": "{distance}",
            "commit_hash": "{revision}"
            }}
