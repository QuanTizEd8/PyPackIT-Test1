theme:
  color:
    primary:
      light: '#0F3460'
      dark: '#3A98B9'
    secondary:
      light: '#562B08'
      dark: '#E3651D'
  footer:
    - class: thematic_break
    - class: badges
      style: for-the-badge
      items:
        - service: dynamic
          args:
            url: ${{ control.url.metadata }}$
            query: '$.copyright'
          label: ${{ name }}$
          color: ${{ theme.color.primary.light }}$
          logo: ${{ theme.logo.icon.path }}$
          logo_type: file
          color_dark: ${{ theme.color.primary.dark }}$
          logo_dark: ${{ theme.logo.icon.path }}$
          logo_type_dark: file
          link: ${{ team.owner.github.url }}$
          title: '${{ name }}$: Copyright ${{ copyright }}$'
          alt: ${{ .title }}$
          align: left
        - service: static
          args:
            message: ${{ license.expression }}$
          label: SPDX License Identifier
          color: "#4398CC"
          logo: spdx
          logo_color: "#4398CC"
          link: ${{ web.page.license.url }}$
          title: 'SPDX-License-Identifier: ${{ license.expression }}$'
          alt: 'SPDX-License-Identifier: ${{ license.expression }}$'
          align: right
    - class: badges
      style: for-the-badge
      items:
        - service: repodynamics
          endpoint: pypackit
          align: right
readme:
  main:
    path: README.md
    content:
      body:
        - class: block_image
          src: ${{ theme.logo.full.light.url }}$
          src_dark: ${{ theme.logo.full.dark.url }}$
          title: Welcome to ${{ name }}$! Click to visit our website and learn more.
          alt: '${{ name }}$: ${{ title }}$'
          align: center
          width: 80%
          link: ${{ web.url.home }}$
        - class: menu
          items:
            - text: Intro
              link: ${{ web.page.intro.url }}$
              title: Introduction and Background
            - text: Manual
              link: ${{ web.page.manual.url }}$
              title: User Manual
            - text: News
              link: ${{ web.page.blog.url }}$
              title: Latest News and Releases
            - text: Contribute
              link: ${{ web.page.contribute.url }}$
              title: How to Contribute
            - text: About
              link: ${{ web.page.about.url }}$
              title: About the Project
            - text: Help
              link: ${{ web.page.help.url }}$
              title: Get Help and Support
          line_top_width: 80%
          line_bottom_width: 100%
          style: for-the-badge
          color: ${{ theme.color.primary.light }}$
          color_dark: ${{ theme.color.primary.dark }}$
          height: 33px
          attrs_container:
            align: center
        - - class: badge
            service: static
            label: Keywords
            args:
              message: ${{ keywords[0] }}$
            style: ${{ __custom__.badge.style }}$
            height: ${{ __custom__.badge.height }}$
            color: ${{ __custom__.badge.color.blue }}$
            label_color: ${{ __custom__.badge.color.grey }}$
          - '&nbsp;'
          - class: buttons
            items: ${{ keywords[1:] }}$
            style: ${{ __custom__.badge.style }}$
            height: ${{ __custom__.badge.height }}$
            color: ${{ __custom__.badge.color.blue }}$
        - class: paragraph
          content: ${{ abstract }}$
          attrs:
            align: justify
        - class: badges
          service: static
          style: ${{ __custom__.badge.style }}$
          height: ${{ __custom__.badge.height }}$
          color: ${{ __custom__.badge.color.blue }}$
          label_color: ${{ __custom__.badge.color.grey }}$
          separator: ${{ __custom__.badge.separator }}$
          items:
            - |
              *{{
                #{{
                  out = []
                  doi = get("var.zenodo.concept.doi")
                  if doi:
                    zenodo = {
                      "label": "DOI",
                      "args": {"message": doi},
                      "logo": "zenodo",
                      "logo_type": "name",
                      "color": "#1682D4",
                      "link": f"https://doi.org/{doi}"
                    }
                    out.append(zenodo)
                  if get("pkg.pypi.publishable") and get("workflow.publish.pypi"):
                    pypi = {
                      "label": "PyPI",
                      "args": {"message": f"pip install {get("pkg.name")}"},
                      "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                      "logo_type": "file",
                      "logo_media_type": "png",
                      "color": "#3775A9",
                      "link": get("pkg.pypi.url.home"),
                    }
                    out.append(pypi)
                  if get("pkg.conda") and get("workflow.publish.conda-forge"):
                    conda = {
                      "label": "Conda",
                      "args": {"message": f"conda install {get("pkg.name")} -c conda-forge"},
                      "logo": "anaconda",
                      "logo_type": "name",
                      "logo_color": "#44A833",
                      "color": "#44A833",
                      "link": get("pkg.conda.url.home"),
                    }
                    out.append(conda)
                  if get("workflow.publish.github"):
                    github = {
                      "label": "GitHub",
                      "args": {"message": get("repo.name")},
                      "logo": "github",
                      "logo_type": "name",
                      "color": "#181717",
                      "link": get("repo.url.releases.home"),
                    }
                    out.append(github)
                  return out
                }}#
              }}*
            - service: binder
              endpoint: github
              label: Binder
              args:
                message: try online
                user: ${{ repo.owner }}$
                repo: ${{ repo.name }}$
                ref: ${{ repo.default_branch }}$
              color: "#579ACA"
              label_color: ${{ __custom__.badge.color.grey }}$
      section:
        - heading: Highlights
          body:
            - class: highlights
              items: ${{ highlights }}$
              button:
                style: for-the-badge
                color: [ '${{ theme.color.primary.light }}$', '${{ theme.color.secondary.light }}$' ]
                color_dark: [ '${{ theme.color.primary.dark }}$', '${{ theme.color.secondary.dark }}$' ]
                height: 30px
                align: left
              attrs_p:
                align: justify
        - heading: >-
            #{{
              if changelog.current_public.get("phase") == "dev":
                return "Upcoming Release"
              return "Latest Release"
            }}#
          body: ${{ __custom__.changelog.body }}$
          section: ${{ __custom__.changelog.section }}$
        - heading: Statistics
          body:
            - class: table
              rows:
                - - <b>Project</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - endpoint: created_at
                          label: üóì‚ÄÇCreation Date
                        - endpoint: contributors
                          label: üßë‚ÄçüíªÔ∏è‚ÄÇContributors
                        - endpoint: language_count
                          label: üî†‚ÄÇProgramming Languages
                        - endpoint: top_language
                          logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
                          logo_type: file
                          logo_media_type: svg+xml
                        - endpoint: repo_size
                          label: üöö‚ÄÇRepo Size
                        - endpoint: code_size
                          label: üöõ‚ÄÇCode Size
                - - <b>Health</b>
                  - - class: badges
                      service: github
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      separator: ${{ __custom__.badge.separator }}$
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - service: codecov
                          endpoint: coverage
                          args:
                            vcs_name: github
                        - service: librariesio
                          endpoint: source_rank
                          args:
                            platform: pypi
                            package: ${{ pkg.name }}$
                        - service: librariesio
                          endpoint: dependency_status
                          args:
                            platform: pypi
                            package: ${{ pkg.name }}$
                          label: Package Dependencies
                        - service: librariesio
                          endpoint: dependency_status_github
                          args:
                            platform: github
                            package: ""
                          label: Repository Dependencies
                        - service: website
                          args:
                            url: ${{ web.url.home }}$
                            up_message: online
                            up_color: '#00802b'
                            down_message: offline
                            down_color: '#AF1F10'
                          label: Website
                - - <b>Standards</b>
                  - - class: badges
                      service: static
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      separator: ${{ __custom__.badge.separator }}$
                      items:
                        - label: Testing
                          args:
                            message: Pytest
                          color: "#0A9EDC"
                          logo: pytest
                          logo_color: "#0A9EDC"
                          logo_type: name
                          link: https://github.com/pytest-dev/pytest/
                        - label: Type Checking
                          args:
                            message: mypy
                          color: "#2A6DB2"
                          logo: ${{ web.path.source }}$/_media/logo_ext/mypy.svg
                          logo_type: file
                          logo_media_type: svg+xml
                          link: https://github.com/python/mypy
                        - label: Lint
                          args:
                            message: Ruff
                          color: "#D7FF64"
                          logo: ruff
                          logo_type: name
                          logo_color: "#D7FF64"
                          link: https://github.com/astral-sh/ruff
                        - label: Security
                          args:
                            message: CodeQL
                          color: "#181717"
                          logo: github
                          logo_type: name
                          link: https://codeql.github.com/
                        - label: Code Style
                          args:
                            message: Black
                          color: "#000"
                          logo: ${{ web.path.source }}$/_media/logo_ext/black.png
                          logo_type: file
                          logo_media_type: png
                          link: https://github.com/psf/black
                - - <b>Downloads</b>
                  - - - |
                        *{{
                          #{{
                            if not get("pkg.pypi.publishable"):
                              return []
                            badges = {
                              "class": "badges",
                              "style": get("__custom__.badge.style"),
                              "height": get("__custom__.badge.height"),
                              "color": get("__custom__.badge.color.blue"),
                              "separator": 1,
                              "service": "pypi",
                              "endpoint": "downloads",
                              "args": {"package": get("pkg.name")},
                              "logo": "",
                              "label": "",
                              "items": [
                                {
                                  "service": "pepy",
                                  "endpoint": "total_downloads",
                                  "label": "PyPI",
                                  "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                  "logo_type": "file",
                                  "logo_media_type": "png",
                                },
                              ] + [{"args": {"period": period}} for period in ("m", "w", "d")]
                            }
                            return [badges, "&nbsp;" * get("__custom__.badge.separator")]
                          }}#
                        }}*
                      - |
                        *{{
                          #{{
                            conda = get("pkg.conda")
                            if not conda:
                              return []
                            badge = {
                              "class": "badge",
                              "style": get("__custom__.badge.style"),
                              "height": get("__custom__.badge.height"),
                              "color": get("__custom__.badge.color.blue"),
                              "service": "conda",
                              "endpoint": "downloads",
                              "args": {"channel": conda["channel"], "package": get("pkg.name")},
                              "label": "Conda",
                              "logo": "anaconda",
                              "logo_color": "#44A833",
                            }
                            return [badge, "&nbsp;" * get("__custom__.badge.separator")]
                          }}#
                        }}*
                      - class: badge
                        style: ${{ __custom__.badge.style }}$
                        height: ${{ __custom__.badge.height }}$
                        color: ${{ __custom__.badge.color.blue }}$
                        service: github
                        endpoint: downloads_all_releases
                        label: GitHub
                        args:
                          user: ${{ repo.owner }}$
                          repo: ${{ repo.name }}$
                - - <b>Users</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: librariesio
                      args:
                        platform: pypi
                        package: ${{ pkg.name }}$
                      items:
                        - endpoint: dependents
                          label: Dependent Packages
                        - endpoint: dependents
                          args:
                            repo: true
                          label: Dependent Repositories
                - |
                  *{{
                    #{{
                      out = []
                      label_data = [("Total", None)] + [
                        (badge_label, get(f"label.type.label.{label_type}.name"))
                        for badge_label, label_type in (
                          (f"{get(f"__custom__.icon.fix")}‚ÄÇBug Fixes", "fix"),
                          (f"{get(f"__custom__.icon.feat")}‚ÄÇNew Features", "feat"),
                          (f"{get(f"__custom__.icon.change")}‚ÄÇBreaking Changes", "change"),
                        )
                      ]
                      repo_owner = get("repo.owner")
                      repo_name = get("repo.name")
                      color_open = get("__custom__.badge.color.red")
                      color_closed = get("__custom__.badge.color.green")
                      style = get("__custom__.badge.style")
                      height = get("__custom__.badge.height")
                      separator = get("__custom__.badge.separator")
                      for title, issue_kind in (
                        ("Issues", "issues"),
                        ("PRs", "pulls"),
                      ):
                        badges = []
                        for badge_label, issue_label in label_data:
                          badges_config = {
                            "class": "badges",
                            "service": "github",
                            "endpoint": "issue_count",
                            "args": {"user": repo_owner, "repo": repo_name, "kind": issue_kind, "label": issue_label},
                            "style": style,
                            "height": height,
                            "separator": 0,
                            "items": [
                              {"args": {"state": "open"}, "label": badge_label, "color": color_open},
                              {"args": {"state": "closed"}, "label": "", "color": color_closed},
                            ],
                          }
                          badges.extend([badges_config, "&nbsp;" * separator])
                        out.append([f"<b>{title}</b>", [badges]])
                      return out
                    }}#
                  }}*
                - - <b>Commits</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      endpoint: commit_activity
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - args:
                            interval: t
                          label: Total
                          logo: git
                          logo_type: name
                          logo_color: "#F05032"
                        - args:
                            interval: y
                          label: ""
                        - args:
                            interval: m
                          label: ""
                        - args:
                            interval: w
                          label: ""
                        - endpoint: commits_since_latest_release
                          label: Since Latest Release
                        - endpoint: last_commit
                          label: Last
                - - <b>Discussions</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      endpoint: discussion_search_hits
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - |
                          *{{
                            #{{
                              return [
                                {
                                  "args": {"query": f'category:"{category["name"]}"'},
                                  "label": f"{category["emoji"]}‚ÄÇ{category["name"]}",
                                  "title": category["description"],
                                } for category in get("discussion.category", {}).values()
                              ]
                            }}#
                          }}*
                - - <b>Community</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      color: ${{ __custom__.badge.color.blue }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      logo: github
                      items:
                        - endpoint: forks
                        - endpoint: stars
                        - endpoint: watchers
                - - <b>DevOps</b>
                  - - class: badges
                      style: ${{ __custom__.badge.style }}$
                      height: ${{ __custom__.badge.height }}$
                      separator: ${{ __custom__.badge.separator }}$
                      service: github
                      args:
                        user: ${{ repo.owner }}$
                        repo: ${{ repo.name }}$
                      items:
                        - endpoint: workflow_status
                          logo: github
                          logo_type: name
                          args:
                            workflow: main.yaml
                          label: CI
                        - |
                          *{{
                            #{{
                              import jinja2

                              out = []
                              for platform in ("pypi", "testpypi"):
                                env = get(f"workflow.publish.{platform}.env")
                                if env:
                                  for pkg_key in ("pkg", "test"):
                                    pkg_name = get(f"{pkg_key}.name")
                                    if pkg_name:
                                      env_name = jinja2.Template(env["name"]).render(
                                        pkg={"name": pkg_name}
                                      )
                                      badge = {
                                        "endpoint": "deployment_status",
                                        "args": {"environment": env_name},
                                        "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                                        "logo_type": "file",
                                        "logo_media_type": "png",
                                      }
                                      out.append(badge)
                              for platform in ("zenodo", "zenodo_sandbox"):
                                env = get(f"workflow.publish.{platform}.env")
                                if env:
                                  badge = {
                                    "endpoint": "deployment_status",
                                    "args": {"environment": env["name"]},
                                    "logo": "zenodo",
                                    "logo_type": "name",
                                  }
                                  out.append(badge)
                              github_env = get("workflow.publish.github.env")
                              if github_env:
                                badge = {
                                  "endpoint": "deployment_status",
                                  "args": {"environment": github_env["name"]},
                                  "logo": "github",
                                  "logo_type": "name",
                                }
                                out.append(badge)
                              web_env = get("workflow.web.env")
                              if web_env:
                                badge = {
                                  "endpoint": "deployment_status",
                                  "args": {"environment": web_env["name"]},
                                  "logo": "github",
                                  "logo_type": "name",
                                }
                                out.append(badge)
                              rtd_name = get("tool.readthedocs.config.workflow.name")
                              if rtd_name:
                                badge = {
                                  "service": "readthedocs",
                                  "endpoint": "build_status",
                                  "args": {"name": rtd_name},
                                  "label": "CD ReadTheDocs",
                                }
                                out.append(badge)
                              return out
                            }}#
                          }}*
health:
  code_owners: { }
  code_of_conduct:
    path: CODE_OF_CONDUCT.md
    content:
      class: covenant_code_of_conduct
      contact_name: |
        #{{
          return team_members_with_role_ids(
            "coc",
            active_only=True,
          )[0]["email"]["id"]
        }}#
      contact_url: |
        #{{
          return team_members_with_role_ids(
            "coc",
            active_only=True,
          )[0]["email"]["url"]
        }}#
  contributing:
    path: CONTRIBUTING.md
    content:
      heading: ${{ name }}$ Contributing Guidelines
      body:
        - class: paragraph
          attrs:
            align: justify
          content: |
            Welcome to the <em>${{ name }}$</em> community!
            We are excited to have you here,
            and grateful that you are considering contributing.
            ${{ name }}$ is a free and open-source project that evolves with the needs of its users,
            and can only grow through the help of great members like you.
      section:
        - heading: How To Contribute
          body:
            - class: paragraph
              attrs:
                align: justify
              content: |
                To keep all our project documentation organized and easy to find, the complete
                <a href="${{ web.page.contribute.url }}$">contribution guide</a> is hosted on our website.
  security:
    path: SECURITY.md
    content:
      heading: Security Policy
doc:
  announcement:
    path: ${{ web.path.root }}$/announcement.html
web:
  toc:
    path: .toc.yaml
    root: index
    defaults:
      hidden: true
    entries:
      - file: intro/index
        title: Intro
        options:
          numbered: true
        entries:
          - file: intro/overview/index
          - file: intro/background/index
      - file: manual/index
        title: Manual
        options:
          numbered: true
        entries:
          - file: manual/install/index
          - file: manual/quickstart/index
          - file: manual/testing/index
      - file: api/index
        title: API
        entries:
          - file: api/${{ pkg.import_name }}$/${{ pkg.import_name }}$
      - file: news/index
        title: News
        entries:
          - glob: news/post/**
      - file: contribute/index
        title: Contribute
        options:
          numbered: true
      - file: about/index
        title: About
        options:
          numbered: true
        entries:
          - file: about/contact/index
      - file: help/index
        title: Help
        options:
          numbered: true
        entries:
          - file: help/sitemap/index
  sphinx:
    config:
      trim_footnote_reference_space: true
      math_eqref_format: Eq. {number}
      math_number_all: true
      math_numfig: true
      math_numsep: .
      nitpicky: true
      maximum_signature_line_length: 80
      root_doc: index
      templates_path:
        - _templates  # Ref: https://www.sphinx-doc.org/en/master/development/templating.html
      show_warning_types: true
      html_title: ${{ name }}$
      html_short_title: ${{ name }}$
      html_baseurl: ${{ web.url.base }}$
      html_favicon: ${{ theme.logo.icon.path_web }}$
      html_sidebars:
        "${{ web.page.blog.path }}$/**":
          - ablog/postcard.html
          - ablog/recentposts.html
          - ablog/tagcloud.html
          - ablog/categories.html
          - ablog/archives.html
          - ablog/authors.html
      html_static_path:
        - _static
        # Due to an issue with the PyData Sphinx Theme,
        #    the logo files used in the navbar must be explicitly
        #    added to the root of static path, since PyData always looks there,
        #    regardless of the set path.
        #    Refs:
        #    - https://github.com/pydata/pydata-sphinx-theme/issues/1325
        #    - https://github.com/pydata/pydata-sphinx-theme/issues/1328
        #    - https://github.com/pydata/pydata-sphinx-theme/issues/1385
        - '${{ theme.logo.simple.light.path_web }}$'
        - '${{ theme.logo.simple.dark.path_web }}$'
      html_secnumber_suffix: ".‚ÄÇ"
      html_extra_path: [ ]
      html_use_opensearch: ${{ web.url.base }}$
      html_show_sphinx: false
      html_math_renderer: mathjax
      html_context:
        # Used by the Giscus template to extract page title
        pp_title_sep: ${{ web.sphinx.config.html_secnumber_suffix }}$
      html_last_updated_fmt: '%b %d, %Y'
      language: en
      latex_engine: lualatex
      latex_elements:
        papersize: a4paper
        pointsize: 11pt
        figure_align: htbp
        fontpkg: |
          \setmainfont{DejaVu Serif}
          \setsansfont{DejaVu Sans}
          \setmonofont{DejaVu Sans Mono}
        preamble: |
          \usepackage[titles]{tocloft}
          \usepackage{fontspec}
          \cftsetpnumwidth {1.25cm}\cftsetrmarg{1.5cm}
          \setlength{\cftchapnumwidth}{0.75cm}
          \setlength{\cftsecindent}{\cftchapnumwidth}
          \setlength{\cftsecnumwidth}{1.25cm}
        fncychap: '\usepackage[Bjornstrup]{fncychap}'
        printindex: '\footnotesize\raggedright\printindex'
      latex_theme: manual
      latex_show_urls: footnote
      latex_show_pagerefs: true
      latex_logo: ${{ theme.logo.full.raster.path_web }}$
      python_display_short_literal_types: true
      python_maximum_signature_line_length: 80
    extension:
      # Sphinx's built-in extensions: https://www.sphinx-doc.org/en/master/usage/extensions/index.html#built-in-extensions
      autosummary:
        dependency:
          import_name: sphinx.ext.autosummary
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html
        config:
          autosummary_generate: true
          autosummary_generate_overwrite: true
          autosummary_imported_members: false
          autosummary_ignore_module_all: false
      extlinks:
        dependency:
          import_name: sphinx.ext.extlinks
      duration:
        dependency:
          import_name: sphinx.ext.duration
      doctest:
        dependency:
          import_name: sphinx.ext.doctest
      autodoc:
        dependency:
          import_name: sphinx.ext.autodoc
      mathjax:
        dependency:
          import_name: sphinx.ext.mathjax
      linkcode:
        # For configuration see `linkcode_resolve` function in `conf.py`.
        dependency:
          import_name: sphinx.ext.linkcode
          description: Linking source code to documentation.
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/linkcode.html
      intersphinx:
        dependency:
          import_name: sphinx.ext.intersphinx
          description: Adding links to external documentation.
          notes: |
            This is also required for the
            [ABlog extension](https://ablog.readthedocs.io/en/stable/index.html#getting-started).
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html
        config:
          intersphinx_mapping:
            # When `intersphinx_registry` (see `env` key) is used,
            # you can specify keys without values;
            # these will be automatically filled in by the registry.
            python: [ 'https://docs.python.org/3/', null ]
            numpy: null
            scipy: null
            matplotlib: null
      ifconfig:
        dependency:
          import_name: sphinx.ext.ifconfig
          description: Conditional content in Sphinx.
          url:
            docs: https://www.sphinx-doc.org/en/master/usage/extensions/ifconfig.html
  theme:
    dependency:
      import_name: pydata_sphinx_theme
      pip:
        spec: pydata-sphinx-theme == 0.15.4
      conda:
        spec: pydata-sphinx-theme == 0.15.4
        channel: conda-forge
      url:
        docs: https://pydata-sphinx-theme.readthedocs.io/
        source: https://github.com/pydata/pydata-sphinx-theme
    config:
      # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/layout.html#references
      html_theme_options:
        # ---- Section Layout ----
        # -- Header --
        navbar_start: [ navbar-logo ]  # header left
        navbar_center: [ navbar-nav ]  # header center
        navbar_persistent: [ search-button ]  # header right persistent
        navbar_end: [ navbar-icon-links, theme-switcher ]  # header right
        navbar_align: left  # alignment of `navbar_center`: {"left", "right", "content"}
        # -- Article Header --
        article_header_start: [ breadcrumbs ]  # article header left
        article_header_end: [ ]  # article header right
        # -- Article Footer --
        article_footer_items: [ ]  # article footer
        # -- Primary Sidebar (left) --
        primary_sidebar_end: [ ]  # left sidebar bottom
        # -- Secondary Sidebar (right) --
        secondary_sidebar_items:
          - page-toc
          - last-updated
          - edit-this-page
          - indices
        # -- Content Footer --
        content_footer_items: [ ]
        # -- Footer --
        footer_start: [ version, copyright, pypackit_ver ]  # footer left
        footer_center: [ ]  # footer center
        footer_end: [ quicklinks ]  # footer right
        # ---- General ----
        show_prev_next: True
        show_nav_level: 2
        navigation_depth: 5
        show_toc_level: 3
        header_links_before_dropdown: 7
        icon_links:
          - name: PyPI Distribution
            icon: fa-brands fa-python
            url: ${{ pkg.pypi.url.home }}$
          - name: Source Repository
            icon: fa-brands fa-github
            url: ${{ repo.url.home }}$
          - name: Issues
            icon: fa-regular fa-circle-dot
            url: ${{ repo.url.issues.home }}$
          - name: Pull Requests
            icon: fa-solid fa-code-pull-request
            url: ${{ repo.url.pulls.home }}$
          - name: Discussions
            icon: fa-solid fa-comments
            url: ${{ repo.url.discussions.home }}$
          - name: License
            icon: fa-solid fa-copyright
            url: ${{ web.page.license.url }}$
        icon_links_label: External links
        use_edit_page_button: true
        announcement: ${{ doc.announcement.url }}$
        search_bar_text: Search ${{ name }}$
        back_to_top_button: true
        logo:
          image_light: _static/simple_light.svg
          image_dark: _static/simple_dark.svg
          alt_text: ${{ name }}$
        pygments_light_style: default  # Code highlighting color themes. See: https://pygments.org/styles/
        pygments_dark_style: monokai   # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/styling.html#configure-pygments-theme
        sidebarwidth: 270
        sidebar_includehidden: True
      html_context:
        github_user: ${{ team.owner.github.id }}$
        github_repo: ${{ repo.name }}$
        github_version: ${{ repo.default_branch }}$
        doc_path: ${{ web.path.source }}$
        default_mode: auto  # Default theme mode: {'light', 'dark', 'auto'}
  extension:
    # Resources:
    # - https://www.sphinx-doc.org/en/master/usage/extensions/index.html#third-party-extensions
    myst-nb:
      dependency:
        import_name: myst_nb
        description: Adding MyST Markdown and Jupyter support to Sphinx.
        note: |
          MyST-NB is built on top of [MyST-Parser](https://myst-parser.readthedocs.io/)
          and exposes all of its functionalities. It also includes support for Jupyter Notebooks.
          When using MyST-NB, MyST-Parser must not be included separately.
        url:
          source: https://github.com/executablebooks/MyST-Parser
          docs: https://myst-parser.readthedocs.io/
          pip: https://pypi.org/project/myst-nb/
          conda: https://anaconda.org/conda-forge/myst-nb
        pip:
          spec: myst-nb == 1.1.1
        conda:
          spec: myst-nb = 1.1.1
          channel: conda-forge
      config:
        # ---- MyST Parser Configurations ----
        # Ref: https://myst-parser.readthedocs.io/en/latest/configuration.html
        myst_enable_extensions: # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html
          - amsmath
          - attrs_inline
          - attrs_block
          - colon_fence
          - deflist
          - dollarmath
          - fieldlist
          - html_admonition
          - html_image
          - linkify
          - replacements
          - smartquotes
          - substitution
          - tasklist
        myst_links_external_new_tab: true
        myst_heading_anchors: 6
        myst_fence_as_directive: [ mermaid ]  # https://github.com/mgaitan/sphinxcontrib-mermaid?tab=readme-ov-file#markdown-support
        myst_sub_delimiters:
          - "|"
          - "|"
    thebe:
      dependency:
        import_name: sphinx_thebe
        description: Make code cells interactive in Sphinx.
        url:
          source: https://github.com/executablebooks/sphinx-thebe
          docs: https://sphinx-thebe.readthedocs.io
          pip: https://pypi.org/project/sphinx-thebe/
          conda: https://anaconda.org/conda-forge/sphinx-thebe
        pip:
          spec: sphinx-thebe == 0.3.1
        conda:
          spec: sphinx-thebe = 0.3.1
          channel: conda-forge
    design:
      dependency:
        import_name: sphinx_design
        description: Adding responsive web components, such as grids, cards, tabs, etc.
        url:
          docs: https://sphinx-design.readthedocs.io/
          source: https://github.com/executablebooks/sphinx-design
        pip:
          spec: sphinx-design == 0.6.1
        conda:
          spec: sphinx-design = 0.6.1
          channel: conda-forge
      config:
        sd_fontawesome_latex: true
    ext_toc:
      dependency:
        import_name: sphinx_external_toc
        description: Adding external table of contents to Sphinx.
        url:
          source: https://github.com/executablebooks/sphinx-external-toc
          docs: https://sphinx-external-toc.readthedocs.io
          pip: https://pypi.org/project/sphinx_external_toc/
          conda: https://anaconda.org/conda-forge/sphinx-external-toc
        pip:
          spec: sphinx_external_toc == 1.0.1
        conda:
          spec: sphinx-external-toc = 1.0.1
          channel: conda-forge
      config:
        external_toc_path: ${{ web.toc.path }}$
        external_toc_exclude_missing: false
    autodoc2:
      dependency:
        import_name: autodoc2
        description: Automatically generating Python API documentation from docstrings.
        url:
          docs: https://sphinx-autodoc2.readthedocs.io/
          source: https://github.com/sphinx-extensions2/sphinx-autodoc2
          pip: https://pypi.org/project/sphinx-autodoc2/
        pip:
          spec: sphinx-autodoc2 == 0.5.0
      config:
        autodoc2_index_template: null
        autodoc2_packages: [ '${{ web.path.to_root }}$/${{ pkg.path.import }}$' ]
        autodoc2_output_dir: api
        autodoc2_render_plugin: myst
        autodoc2_hidden_objects: [ private, inherited ]
        autodoc2_sort_names: true
    ablog:
      dependency:
        import_name: ablog
        description: Adding a news blog to the website.
        url:
          docs: https://ablog.readthedocs.io/
          source: https://github.com/sunpy/ablog
          docs_config:
            url: https://ablog.readthedocs.io/en/stable/manual/ablog-configuration-options.html
        pip:
          spec: ablog == 0.11.11
        conda:
          spec: ablog = 0.11.11
          channel: conda-forge
      config:
        # blog_authors (if not explicitly set here) is dynamically generated in conf.py from `team` data.
        blog_baseurl: ${{ web.url.base }}$
        blog_default_author: owner
        blog_feed_archives: true
        blog_path: ${{ web.page.blog.path }}$/list
        blog_post_pattern:
          - ${{ web.page.blog.path }}$/post/*.md
        post_show_prev_next: false
        blog_title: ${{ name }}$ News
        fontawesome_included: true
        post_always_section: true
        post_auto_image: 1
    copy_button:
      dependency:
        import_name: sphinx_copybutton
        description: Adding a copy button to code blocks.
        url:
          docs: https://sphinx-copybutton.readthedocs.io/
          source: https://github.com/executablebooks/sphinx-copybutton
        pip:
          spec: sphinx-copybutton == 0.5.2
        conda:
          spec: sphinx-copybutton = 0.5.2
          channel: conda-forge
    last_update:
      dependency:
        import_name: sphinx_last_updated_by_git
        pip:
          spec: sphinx-last-updated-by-git == 0.3.7
        description: Adding page-specific last-updated dates to each page.
        url:
          docs: https://sphinx-last-updated-by-git.readthedocs.io/
          source: https://github.com/mgeier/sphinx-last-updated-by-git
    opengraph:
      dependency:
        import_name: sphinxext.opengraph
        description: |
          Generating [Open Graph](https://ogp.me/) metadata for each page.
        url:
          docs: https://sphinxext-opengraph.readthedocs.io/
          source: https://github.com/wpilibsuite/sphinxext-opengraph/
          pip: https://pypi.org/project/sphinxext-opengraph
          conda: https://anaconda.org/conda-forge/sphinxext-opengraph
        pip:
          spec: sphinxext-opengraph == 0.9.1
        conda:
          spec: sphinxext-opengraph = 0.9.1
          channel: conda-forge
      config:
        ogp_site_url: ${{ web.url.base }}$
        ogp_use_first_image: true
        ogp_enable_meta_description: true
        ogp_social_cards:
          image: _static/simple_light.svg
          line_color: ${{ theme.color.primary.light }}$
    bibtex:
      dependency:
        import_name: sphinxcontrib.bibtex
        description: Adding BibTeX-style citations.
        url:
          docs: https://sphinxcontrib-bibtex.readthedocs.io/
          source: https://github.com/mcmtroffaes/sphinxcontrib-bibtex
          pip: https://pypi.org/project/sphinxcontrib-bibtex/
          conda: https://anaconda.org/conda-forge/sphinxcontrib-bibtex
        pip:
          spec: sphinxcontrib-bibtex == 2.6.3
        conda:
          spec: sphinxcontrib-bibtex = 2.6.3
          channel: conda-forge
      config:
        bibtex_bibfiles: [refs.bib]
        bibtex_default_style: plain
        bibtex_reference_style: label
    toggle_button:
      dependency:
        import_name: sphinx_togglebutton
        description: Adding toggle buttons to admonitions and other content.
        url:
          docs: https://sphinx-togglebutton.readthedocs.io/
          source: https://github.com/executablebooks/sphinx-togglebutton
        pip:
          spec: sphinx-togglebutton == 0.3.2
        conda:
          spec: sphinx-togglebutton = 0.3.2
          channel: conda-forge
      config:
        # https://sphinx-togglebutton.readthedocs.io/en/latest/use.html#change-the-button-hint-text
        togglebutton_hint: show details
        togglebutton_hint_hide: hide details
    mermaid:
      dependency:
        import_name: sphinxcontrib.mermaid
        description: Adding Mermaid diagrams and charts.
        url:
          docs: https://sphinxcontrib-mermaid-demo.readthedocs.io/en/stable/
          source: https://github.com/mgaitan/sphinxcontrib-mermaid
        pip:
          spec: sphinxcontrib-mermaid == 0.9.2
        conda:
          spec: sphinxcontrib-mermaid = 0.9.2
          channel: conda-forge
    svg2pdf:
      dependency:
        import_name: sphinxcontrib.rsvgconverter
        description: Converting SVG images to PNG for LaTeX.
        pip:
          spec: sphinxcontrib-svg2pdfconverter[CairoSVG] == 1.2.2
        url:
          source: https://github.com/missinglinkelectronics/sphinxcontrib-svg2pdfconverter
        notes: |
          This doesn't work on `latex_logo`;
          see [nbsphinx](https://nbsphinx.readthedocs.io/en/latest/markdown-cells.html).
    tippy:
      dependency:
        import_name: sphinx_tippy
        description: Adding rich hover tooltips to content.
        url:
          docs: https://sphinx-tippy.readthedocs.io
          source: https://github.com/sphinx-extensions2/sphinx-tippy
          pip: https://pypi.org/project/sphinx_tippy
        pip:
          spec: sphinx-tippy == 0.4.3
      config:
        tippy_props:
          placement: auto-start  # https://atomiks.github.io/tippyjs/v6/all-props/#placement
          maxWidth: 500  # https://atomiks.github.io/tippyjs/v6/all-props/#maxwidth
          theme: material  # https://atomiks.github.io/tippyjs/v6/all-props/#theme
          interactive: true  # https://atomiks.github.io/tippyjs/v6/all-props/#interactive
          delay: [200, 500]  # https://atomiks.github.io/tippyjs/v6/all-props/#delay
          duration: [200, 100]  # https://atomiks.github.io/tippyjs/v6/all-props/#duration
    not_found_page:
      dependency:
        import_name: notfound.extension
        description: Handling relative links in the custom 404 page.
        url:
          docs: https://sphinx-notfound-page.readthedocs.io/
          source: https://github.com/readthedocs/sphinx-notfound-page
          pip: https://pypi.org/project/sphinx-notfound-page/
        pip:
          spec: sphinx-notfound-page == 1.0.4
      config:
        notfound_urls_prefix: /${{ repo.name }}$/  # dynamically set in conf.py if not set here
  env:
    file:
      conda:
        name: ${{ repo.name }}$-docs
        path: ${{ web.path.root }}$/environment.yaml
      pip:
        path: ${{ web.path.root }}$/requirements.txt
    dependency:
      myst:
        import_name: myst_parser
        description: Adding MyST Markdown functionalities to Sphinx.
        notes: |
          This is added as a dependency and not an extension
          because the MyST-NB extension (a superset of MyST-Parser) is used as an extension,
          which already includes MyST-Parser.
          However, here we specifically include MyST-Parser to ensure the correct version is installed.
        url:
          source: https://github.com/executablebooks/MyST-Parser
          docs: https://myst-parser.readthedocs.io/
        pip:
          spec: myst-parser[linkify] == 3.0.1
        conda:
          spec: myst-parser = 3.0.1
          channel: conda-forge
      linkify:
        import_name: linkify_it
        description: |
          Linkify extension for MyST Markdown to automatically convert URLs to hyperlinks.
        url:
          docs: https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#linkify
        pip:
          spec: linkify-it-py == 2.0.3
        conda:
          spec: linkify-it-py == 2.0.3
          channel: conda-forge
      git:
        import_name: gittidy
        description: |
          Git API to automatically retrieve project version from tags during builds.
        url:
          docs: https://gittidy.repodynamics.com
        pip:
          spec: gittidy
      version:
        import_name: versionman
        description: |
          Version management utilities to automatically find the latest version
          from git tags during build.
        url:
          docs: https://versionman.repodynamics.com
        pip:
          spec: versionman
      pysyntax:
        import_name: pysyntax
        description: |
          Parse Python syntax to extract data for API documentation.
        url:
          docs: https://pysyntax.repodynamics.com
        pip:
          spec: pysyntax
      autobuild:
        import_name: sphinx-autobuild
        description: Automatically rebuilding the documentation when changes are made.
        notes: |
          This is added to the `Makefile` of Sphinx under the `livehtml` target,
          meaning that you can run `make livehtml` in the website directory
          to start the autobuild server.
        url:
          source: https://github.com/sphinx-doc/sphinx-autobuild
        pip:
          spec: sphinx-autobuild >= 2024.09.17
      librsvg:
        import_name: librsvg
        description: |
          Library for rendering SVG files and using them
          in PDF (via LaTeX) builds done by latexmk.
        conda:
          spec: librsvg
          channel: conda-forge
        url:
          docs: https://wiki.gnome.org/Projects/LibRsvg
          source: https://gitlab.gnome.org/GNOME/librsvg
      intersphinx_registry:
        import_name: intersphinx_registry
        description: |
          Registry of intersphinx mappings for external documentation.
        url:
          source: https://github.com/Quansight-labs/intersphinx_registry
          pip: https://pypi.org/project/intersphinx_registry/
          conda: https://anaconda.org/conda-forge/intersphinx-registry
        pip:
          spec: intersphinx_registry
        conda:
          spec: intersphinx-registry
          channel: conda-forge
__custom__:
  md_alert_dynamic_dir: |
    > [!CAUTION]
    > **Do not manually modify the contents of this directory**.
    > All files in this directory are automatically maintained.
    > They can be managed through the [`user/discussion.yaml`](${{ control.path }}$/user/discussion.yaml)
    > configuration file of the repository's [control center](${{ control.path }}$).
  badge:
    color:
      grey: "#494949"
      blue: "#0B3C75"
      green: "#00802B"
      orange: "#D93402"
      red: "#AF1F10"
    style: flat-square
    height: 23px
    separator: 2
  icon:
    post: üì´
    fix: üêû
    feat: ‚ú®
    change: üí•
    api: üñ•
    cli: ‚å®Ô∏è
    gui: üñ±
  changelog:
    body:
      - class: badges
        service: static
        style: ${{ __custom__.badge.style }}$
        height: ${{ __custom__.badge.height }}$
        color: ${{ __custom__.badge.color.blue }}$
        label_color: ${{ __custom__.badge.color.grey }}$
        separator: ${{ __custom__.badge.separator }}$
        items:
          - label: ${{ pkg.name }}$
            args:
              message: >-
                #{{ return changelog.current_public.version }}#
            label_color: ${{ theme.color.primary.light }}$
            label_color_dark: ${{ theme.color.primary.dark }}$
            color: ${{ theme.color.secondary.light }}$
            color_dark: ${{ theme.color.secondary.dark }}$
            logo: ${{ theme.logo.icon.path }}$
            logo_type: file
          - label: >-
              #{{
                release_type = changelog.current_public.type
                icon_type = {
                  "major": "change",
                  "minor": "feat",
                  "patch": "fix",
                  "post": "post"
                }[release_type]
                icon = get(f"__custom__.icon.{icon_type}")
                return f"{icon}‚ÄÇRelease Type"
              }}#
            args:
              message: >-
                #{{ return changelog.current_public.type }}#
            color: >-
              #{{
                release_type = changelog.current_public.type
                color_name = {
                  "major": "red",
                  "minor": "orange",
                  "patch": "green",
                  "post": "blue"
                }[release_type]
                return get(f"__custom__.badge.color.{color_name}")
              }}#
          - label: üóì‚ÄÇRelease Date
            args:
              message: >-
                #{{ return changelog.current_public.date }}#
          - |
            *{{
              #{{
                curr_changelog = changelog.current_public
                out = []
                zenodo = curr_changelog.get("zenodo", {})
                if zenodo:
                  badge = {
                    "label": "DOI",
                    "args": {"message": zenodo["doi"]},
                    "logo": "zenodo",
                    "logo_color": "#1682D4",
                    "color": "#1682D4",
                    "link": f"https://zenodo.org/{"uploads" if zenodo.get("draft") else "records"}/{zenodo["id"]}"
                  }
                  out.append(badge)
                version = curr_changelog.version
                if get("pkg.pypi.publishable") and get("workflow.publish.pypi"):
                  pypi = {
                    "label": "pip install",
                    "args": {"message": f"{get("pkg.name")} == {version}"},
                    "logo": f"{get("web.path.source")}/_media/logo_ext/pypi.png",
                    "logo_type": "file",
                    "logo_media_type": "png",
                    "color": "#3775A9",
                    "link": get("pkg.pypi.url.home"),
                  }
                  out.append(pypi)
                if get("pkg.conda") and get("workflow.publish.conda-forge"):
                  conda = {
                    "label": "conda install",
                    "args": {"message": f"{get("pkg.name")} == {version} -c conda-forge"},
                    "logo": "anaconda",
                    "logo_type": "name",
                    "logo_color": "#44A833",
                    "color": "#44A833",
                    "link": get("pkg.conda.url.home"),
                  }
                  out.append(conda)
                tag = f"{get("tag.version.prefix")}{version}"
                github = {
                  "label": "git checkout",
                  "args": {"message": tag},
                  "logo": "github",
                  "logo_type": "name",
                  "color": "#181717",
                  "link": get("repo.url.releases.home"),
                }
                out.append(github)
                binder = {
                  "label": "Binder",
                  "service": "binder",
                  "endpoint": "github",
                  "args": {
                    "message": "try online",
                    "user": get("repo.owner"),
                    "repo": get("repo.name"),
                    "ref": tag
                  },
                  "color": "#579ACA",
                }
                out.append(binder)
                return out
              }}#
            }}*
      - >-
        **#{{ return changelog.current_public.title }}#**
      - >-
        #{{ return changelog.current_public.description }}#
    section:
      - |
        *{{
          #{{
            dev_release = changelog.current_public.get("dev")
            if not dev_release:
              return []
            badge_items = []
            date = dev_release.get("date")
            if date:
              badge_items.append({"label": "üóì‚ÄÇRelease Date", "args": {"message": date}})
            zenodo = dev_release.get("zenodo_sandbox")
            if zenodo:
              badge = {
                "label": "DOI",
                "args": {"message": zenodo["doi"]},
                "logo": "zenodo",
                "logo_color": "#1682D4",
                "color": "#1682D4",
                "link": f"https://sandbox.zenodo.org/{"uploads" if zenodo.get("draft") else "records"}/{zenodo["id"]}"
              }
              badge_items.append(badge)
            version = dev_release.get("version")
            if version:
              tag = f"{get("tag.version.prefix")}{version}"
              github = {
                "label": "git checkout",
                "args": {"message": tag},
                "logo": "github",
                "logo_type": "name",
                "color": "#181717",
                "link": get("repo.url.releases.home"),
              }
              badge_items.append(github)
              binder = {
                "label": "Binder",
                "service": "binder",
                "endpoint": "github",
                "args": {
                  "message": "try online",
                  "user": get("repo.owner"),
                  "repo": get("repo.name"),
                  "ref": tag
                },
                "color": "#579ACA",
              }
              badge_items.append(binder)
            badges = {
              "class": "badges",
              "service": "static",
              "style": get("__custom__.badge.style"),
              "height": get("__custom__.badge.height"),
              "color": get("__custom__.badge.color.blue"),
              "label_color": get("__custom__.badge.color.grey"),
              "separator": get("__custom__.badge.separator"),
              "items": badge_items
            }
            section = {
              "heading": "Latest Developmental Release",
              "body": [badges]
            }
            return [section]
          }}#
        }}*
      - heading: Requirements
        body:
          - - class: button
              text: "‚öôÔ∏è‚ÄÇOperating System"
              style: ${{ __custom__.badge.style }}$
              height: ${{ __custom__.badge.height }}$
              color: ${{ __custom__.badge.color.grey }}$
            - '&nbsp;'
            - class: badges
              service: static
              style: ${{ __custom__.badge.style }}$
              height: ${{ __custom__.badge.height }}$
              label_color: ${{ __custom__.badge.color.grey }}$
              separator: 1
              items:
                - |
                  *{{
                    #{{
                      badges = []
                      oss = get("pkg.os")
                      color_green = get("__custom__.badge.color.green")
                      color_red = get("__custom__.badge.color.red")
                      for os_name, os_id, logo, logo_color in (
                        ("Linux", "linux", f"{get("web.path.source")}/_media/logo_ext/linux.png", None),
                        ("macOS", "macos", "apple", "#000000"),
                        ("Windows", "windows", "https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg", None),
                      ):
                        if os_id not in oss:
                          supports = "not supported"
                          color = color_red
                        else:
                          os = oss[os_id]
                          supports = "any" if "cibuild" not in os else " | ".join(os["cibuild"])
                          color = color_green
                        badge = {
                          "label": os_name,
                          "args": {"message": supports},
                          "color": color,
                          "logo": logo,
                          "logo_color": logo_color
                        }
                        badges.append(badge)
                      return badges
                    }}#
                  }}*
          - - class: badge
              service: static
              args:
                message: "Python"
              style: ${{ __custom__.badge.style }}$
              height: ${{ __custom__.badge.height }}$
              color: ${{ __custom__.badge.color.grey }}$
              label_color: ${{ __custom__.badge.color.grey }}$
              logo: ${{ web.path.source }}$/_media/logo_ext/python.svg
              logo_type: file
              logo_media_type: svg+xml
            - '&nbsp;'
            - class: badges
              service: static
              style: ${{ __custom__.badge.style }}$
              height: ${{ __custom__.badge.height }}$
              color: ${{ __custom__.badge.color.blue }}$
              label_color: ${{ __custom__.badge.color.grey }}$
              separator: 1
              items:
                - label: Versions
                  args:
                    message: >-
                      #{{ return " | ".join(get("pkg.python.version.minors")) }}#
                - label: Implementation
                  args:
                    message: >-
                      #{{ return "any" if get("pkg.python.pure") else pkg.python.implementation }}#
                  color: >-
                    #{{
                      if get("pkg.python.pure"):
                        return get("__custom__.badge.color.green")
                      return get("__custom__.badge.color.blue")
                    }}#
          - |
            #{{
              deps = list(get("pkg.dependency.core", {}).values())
              style = get("__custom__.badge.style")
              height = get("__custom__.badge.height")
              green = get("__custom__.badge.color.green")
              blue = get("__custom__.badge.color.blue")
              grey = get("__custom__.badge.color.grey")
              label = "üì¶‚ÄÇDependencies"
              if not deps:
                badge = {
                  "class": "badge",
                  "service": "static",
                  "label": label,
                  "args": {"message": "none"},
                  "style": style,
                  "height": height,
                  "color": green,
                  "label_color": grey
                }
                return [badge]
              button = {
                "class": "button",
                "text": label,
                "style": style,
                "height": height,
                "color": grey,
              }
              badges = {
                "class": "badges",
                "service": "static",
                "style": style,
                "height": height,
                "label_color": grey,
                "separator": 1,
                "items": [],
              }
              out = [button, "&nbsp;", badges]
              for dep in deps:
                name = dep["name"].strip()
                name_spec = dep.get("pip", {}).get("spec") or dep.get("conda", {}).get("spec")
                spec = name_spec.strip().casefold().removeprefix(name.casefold()).strip()
                badge = {
                  "label": name,
                  "args": {"message": spec or "any"},
                  "color": blue if spec else green,
                }
                badges["items"].append(badge)
              return out
            }}#
      - heading: Interfaces
        body:
          - |
            *{{
              #{{
                interfaces = get("pkg.entry")
                style = get("__custom__.badge.style")
                height = get("__custom__.badge.height")
                blue = get("__custom__.badge.color.blue")
                grey = get("__custom__.badge.color.grey")

                config = {
                  "python": {
                    "text": "API",
                    "logo": f"{get("web.path.source")}/_media/logo_ext/python.svg",
                    "logo_type": "file",
                    "logo_media_type": "svg+xml",
                  },
                  "cli": {
                    "text": "CLI",
                    "logo": "gnubash",
                    "logo_color": "#4EAA25",
                  },
                  "gui": {
                    "text": f"{get("__custom__.icon.gui")}‚ÄÇGUI"
                  },
                }
                item_color = {
                  "python": "#3776AB",
                  "cli": "#000",
                  "gui": "#CCC",
                }
                item_label = {
                  "python": "import",
                  "cli": "$",
                  "gui": "$",
                }

                out = []
                for interface in ("python", "cli", "gui"):
                  if interface not in interfaces:
                    continue
                  button = {
                    "class": "button",
                    "style": style,
                    "height": height,
                    "color": grey,
                  } | config[interface]
                  badges = {
                    "class": "badges",
                    "service": "static",
                    "label": item_label[interface],
                    "style": style,
                    "height": height,
                    "color": blue,
                    "label_color": grey,
                    "separator": 1,
                    "items": [],
                  }
                  out.append([button, "&nbsp;", badges])
                  for entry in interfaces[interface].values():
                    badge = {
                      "args": {"message": entry["name"]},
                      "color": item_color[interface],
                      "title": entry["description"],
                      "alt": entry["name"],
                    }
                    badges["items"].append(badge)
                return out
              }}#
            }}*
